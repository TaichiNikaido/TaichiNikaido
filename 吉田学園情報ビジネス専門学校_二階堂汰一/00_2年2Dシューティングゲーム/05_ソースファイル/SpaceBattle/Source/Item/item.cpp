//=============================================================================
//
// アイテム [item.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "Base/main.h"
#include "Base/manager.h"
#include "Base/renderer.h"
#include "Base/scene2d.h"
#include "Mode/mode_game.h"
#include "Player/player.h"
#include "item.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define MOVE (D3DXVECTOR3(0.0f,4.0f,0.0f))		//移動量
#define SIZE (D3DXVECTOR3(50.0f,50.0f,0.0f))	//サイズ

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************

//=============================================================================
// コンストラクタ
//=============================================================================
CItem::CItem(int nPriority) : CScene2d(nPriority)
{
	m_Move = INITIAL_D3DXVECTOR3;	//移動量
	m_bCollision = false;	//衝突判定
}

//=============================================================================
// デストラクタ
//=============================================================================
CItem::~CItem()
{
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CItem::Init(void)
{
	//2Dシーン管理初期化処理関数呼び出し
	CScene2d::Init();
	//移動量の初期設定
	m_Move = MOVE;
	//サイズの初期設定
	SetSize(SIZE);
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CItem::Uninit(void)
{
	//2Dシーン管理終了処理関数呼び出し
	CScene2d::Uninit();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CItem::Update(void)
{
	//位置を取得する
	D3DXVECTOR3 Position = GetPosition();
	//2Dシーン管理更新処理関数呼び出し
	CScene2d::Update();
	//位置更新
	Position += m_Move;
	//位置の設定
	SetPosition(Position);
	//衝突判定処理関数呼び出し
	Collision();
	//移動可能範囲処理関数呼び出し
	MovableRange();
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CItem::Draw(void)
{
	//2Dシーン管理描画処理関数呼び出し
	CScene2d::Draw();
}

//=============================================================================
// 衝突判定処理関数
//=============================================================================
void CItem::Collision(void)
{
	//位置を取得
	D3DXVECTOR3 Position = GetPosition();
	//サイズを取得
	D3DXVECTOR3 Size = GetSize();
	//プレイヤーの取得
	CPlayer * pPlayer = CGameMode::GetPlayer();
	//もしプレイヤーがNULLじゃない場合
	if (pPlayer != NULL)
	{
		//プレイヤーの位置を取得する
		D3DXVECTOR3 PlayerPosition = pPlayer->GetPosition();
		//プレイヤーのサイズを取得する
		D3DXVECTOR3 PlayerSize = pPlayer->GetSize();
		//プレイヤーとの衝突
		if (Position.x + Size.x / 2 > PlayerPosition.x - (PlayerSize.x / 2) &&
			Position.x - Size.x / 2 < PlayerPosition.x + (PlayerSize.x / 2) &&
			Position.y + Size.y / 2 > PlayerPosition.y - (PlayerSize.y / 2) &&
			Position.y - Size.y / 2 < PlayerPosition.y + (PlayerSize.y / 2))
		{
			//衝突判定を真にする
			m_bCollision = true;
		}
	}
}

//=============================================================================
// 移動可能範囲処理関数
//=============================================================================
void CItem::MovableRange(void)
{
	//位置を取得
	D3DXVECTOR3 Position = GetPosition();
	//もし画面外に行ったら
	if (Position.y < FIELD_HEIGHT_MIN ||
		Position.y > FIELD_HEIGHT ||
		Position.x < FIELD_WIDTH_MIN ||
		Position.x > FIELD_WIDTH)
	{
		//終了処理関数呼び出し
		Uninit();
		return;
	}
}
