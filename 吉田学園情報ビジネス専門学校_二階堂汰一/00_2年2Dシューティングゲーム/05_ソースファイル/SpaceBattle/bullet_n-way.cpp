//=============================================================================
//
// n-way [bullet_n-way.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include <stdio.h>
#include <stdlib.h>
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "scene2d.h"
#include "bullet_n-way.h"
#include "bullet.h"
#include "effect.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define TEXTURE ("Data/Texture/Bullet/bullet.png")	//テクスチャ
#define SIZE (D3DXVECTOR3(10.0f,10.0f,0.0f))		//サイズ
#define MINIMUM_LIFE (0)							//体力の最小値
#define LIFE (500)									//体力
#define EFFECT_LIFE (7)								//エフェクトライフ

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************
LPDIRECT3DTEXTURE9 CBulletN_Way::m_pTexture = NULL;		//テクスチャへのポインタ

//=============================================================================
// コンストラクタ
//=============================================================================
CBulletN_Way::CBulletN_Way()
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CBulletN_Way::~CBulletN_Way()
{
}

//=============================================================================
// テクスチャ読み込み関数
//=============================================================================
HRESULT CBulletN_Way::TextureLoad(void)
{
	//レンダラーの取得
	CRenderer *pRenderer = CManager::GetRenderer();
	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();
	// テクスチャの生成
	D3DXCreateTextureFromFile(pDevice,	// デバイスへのポインタ
		TEXTURE,						// ファイルの名前
		&m_pTexture);					// 読み込むメモリー
	return S_OK;
}

//=============================================================================
// テクスチャ破棄関数
//=============================================================================
void CBulletN_Way::TextureUnload(void)
{
	//もしテクスチャがNULLじゃない場合
	if (m_pTexture != NULL)
	{
		//テクスチャの破棄処理関数呼び出し
		m_pTexture->Release();
		//テクスチャをNULLにする
		m_pTexture = NULL;
	}
}

//=============================================================================
// 生成処理関数
//=============================================================================
CBulletN_Way * CBulletN_Way::Create(D3DXVECTOR3 Position, D3DXVECTOR3 Speed)
{
	//n_way弾のポインタ
	CBulletN_Way * pBulletN_Way = NULL;
	//もしn_way弾のポインタがNULLの場合
	if (pBulletN_Way == NULL)
	{
		//n_way弾のメモリ確保
		pBulletN_Way = new CBulletN_Way;
		//もしn_way弾のポインタがNULLじゃない場合
		if (pBulletN_Way != NULL)
		{
			//初期化処理関数呼び出し
			pBulletN_Way->Init();
			//位置を設定する
			pBulletN_Way->SetPosition(Position);
			//移動量を設定する
			pBulletN_Way->SetMove(Speed);
		}
	}
	//n_way弾のポインタを返す
	return pBulletN_Way;
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CBulletN_Way::Init(void)
{
	//テクスチャのUV座標の設定
	D3DXVECTOR2 aTexture[NUM_VERTEX];
	aTexture[0] = D3DXVECTOR2(0.0f, 0.0f);
	aTexture[1] = D3DXVECTOR2(1.0f, 0.0f);
	aTexture[2] = D3DXVECTOR2(0.0f, 1.0f);
	aTexture[3] = D3DXVECTOR2(1.0f, 1.0f);
	//敵の初期化処理関数呼び出し
	CBulletEnemy::Init();
	//サイズの初期設定
	SetSize(SIZE);
	//体力の初期設定
	SetLife(LIFE);
	//テクスチャの設定
	SetTexture(aTexture);
	//テクスチャの割り当て
	BindTexture(m_pTexture);
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CBulletN_Way::Uninit(void)
{
	//敵の終了処理関数呼び出し
	CBulletEnemy::Uninit();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CBulletN_Way::Update(void)
{
	//敵の更新処理関数呼び出し
	CBulletEnemy::Update();
	//エフェクトの生成
	CEffect::Create(GetPosition(), GetSize(), GetColor(), EFFECT_LIFE);
	//もしライフが0になったら
	if (GetLife() <= MINIMUM_LIFE)
	{
		//死亡処理関数呼び出し
		Death();
	}
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CBulletN_Way::Draw(void)
{
	//敵の描画処理関数呼び出し
	CBulletEnemy::Draw();
}

//=============================================================================
// 死亡処理関数
//=============================================================================
void CBulletN_Way::Death(void)
{
	//終了処理関数呼び出し
	Uninit();
	return;
}
