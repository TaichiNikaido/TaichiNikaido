//=============================================================================
//
// 自機のUI処理 [OwnUI.cpp]
// Author: 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "scene.h"
#include "scene2d.h"
#include "own.h"
#include "ownui.h"
#include <cmath>

//=============================================================================
// コンストラクタ
//=============================================================================
COwnUI::COwnUI(int nPriority) :CScene(nPriority)
{
	memset(m_apOwnUI, 0, sizeof(m_apOwnUI));
	m_nOwnUI = 0;
}

//=============================================================================
//デストラクタ
//=============================================================================
COwnUI::~COwnUI()
{
}

//=============================================================================
// 生成
//=============================================================================
COwnUI * COwnUI::Create(D3DXVECTOR3 pos,float SizeWidth,float SizeHeight)
{
	COwnUI * pOwnUI;
	pOwnUI = new COwnUI;
	pOwnUI->Init(pos,SizeWidth,SizeHeight);
	return pOwnUI;
}

//=============================================================================
// 初期化関数
//=============================================================================
HRESULT COwnUI::Init(D3DXVECTOR3 pos, float SizeWidth,float SizeHeight)
{
	for (int nCount = 0; nCount < MAX_OWN; nCount++)
	{
		m_apOwnUI[nCount] = COwn::Create(D3DXVECTOR3(pos.x + (SizeWidth * nCount), pos.y, 0.0f), SizeHeight, SizeWidth);
	}
	m_nOwnUI = 0;
	return S_OK;
}

//=============================================================================
// 終了関数
//=============================================================================
void COwnUI::Uninit(void)
{
	Release();
}

//=============================================================================
// 更新関数
//=============================================================================
void COwnUI::Update(void)
{
}

//=============================================================================
// 描画関数
//=============================================================================
void COwnUI::Draw(void)
{
	for (int nCount = 0; nCount < MAX_OWN; nCount++)
	{
		m_apOwnUI[nCount]->Draw();
	}
}

//=============================================================================
// セット関数
//=============================================================================
void COwnUI::SetOwnUI(int nOwn)
{
	//もし自機のUIが最大数以下だった時
	if (m_nOwnUI <= MAX_OWN)
	{
		//自機のUIに引数を代入
		m_nOwnUI = nOwn;

		for (int nCount = 0; nCount < MAX_OWN; nCount++)
		{
			m_apOwnUI[nCount]->SetOwn(0);
		}
		for (int nCount = 0; nCount < m_nOwnUI; nCount++)
		{
			m_apOwnUI[nCount]->SetOwn(255);
		}
		
	}
}

//=============================================================================
// 加算関数
//=============================================================================
void COwnUI::AddOwnUI(int nValue)
{
	//自機のUIに引数を加算する
	m_nOwnUI += nValue;
	//自機のUIをセット
	SetOwnUI(m_nOwnUI);
}

//=============================================================================
// 減算関数
//=============================================================================
void COwnUI::SubOwnUI(int nValue)
{
	//自機のUIに引数を減算する
	m_nOwnUI -= nValue;
	//自機のUIをセット
	SetOwnUI(m_nOwnUI);
}
