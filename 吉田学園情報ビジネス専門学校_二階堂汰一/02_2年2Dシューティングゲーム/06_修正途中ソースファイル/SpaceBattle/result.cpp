//=============================================================================
//
// リザルト [result.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// 警告制御
//*****************************************************************************
#define _CRT_SECURE_NO_WARNINGS

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "main.h"
#include "name.h"
#include "renderer.h"
#include "manager.h"
#include "result.h"
#include <stdio.h>
#include <stdlib.h>

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// 静的メンバ変数初期化
//*****************************************************************************

//=============================================================================
// コンストラクタ
//=============================================================================
CResult::CResult()
{
	memset(&m_PlayerData, NULL, sizeof(m_PlayerData));	//プレイヤーデータ
}

//=============================================================================
// デストラクタ
//=============================================================================
CResult::~CResult()
{
}

//=============================================================================
// 生成処理関数
//=============================================================================
CResult * CResult::Create()
{
	//リザルトのポインタ
	CResult * pResult = NULL;
	//もしリザルトのポインタがNUMMの場合
	if (pResult == NULL)
	{
		//リザルトのメモリ確保
		pResult = new CResult;
	}
	//もしリザルトがNULLじゃない場合
	if (pResult != NULL)
	{
		//初期化処理関数呼び出し
		pResult->Init();
	}
	return pResult;
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CResult::Init()
{
	//データ読み込み関数呼び出し
	DataLoad();
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CResult::Uninit(void)
{
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CResult::Update(void)
{
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CResult::Draw(void)
{
}

//=============================================================================
// データ読み込み関数
//=============================================================================
void CResult::DataLoad(void)
{
	//ファイルのポインタ
	FILE * pFile = NULL;
	//もしファイルのポインタがNULLの場合
	if(pFile == NULL)
	{
		//ファイルの読み込み
		pFile = fopen("data/TEXT/PlayerData.txt", "r");
	}
	//もしファイルがNULLじゃない場合
	if (pFile != NULL)
	{
		//プレイヤーの名前読み込み
		fscanf(pFile, "%s", &m_PlayerData.aName);
		//プレイヤーの死亡回数読み込み
		fscanf(pFile, "%d", &m_PlayerData.nDeath);
		//プレイヤーのコンティニュー数読み込み
		fscanf(pFile, "%d", &m_PlayerData.nContinue);
		//プレイヤーの爆弾の使用回数読み込み
		fscanf(pFile, "%d", &m_PlayerData.nBomb);
		//プレイヤーのスコア読み込み
		fscanf(pFile, "%d", &m_PlayerData.nScore);
		//ファイルを閉じる
		fclose(pFile);
	}
}
