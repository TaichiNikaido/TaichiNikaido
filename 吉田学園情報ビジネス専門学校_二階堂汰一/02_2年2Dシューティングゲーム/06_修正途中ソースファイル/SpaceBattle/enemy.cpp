//=============================================================================
//
// 敵 [enemy.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include <stdio.h>
#include <stdlib.h>
#include "main.h"
#include "manager.h"
#include "mode_game.h"
#include "renderer.h"
#include "scene2d.h"
#include "enemy.h"
#include "player.h"
#include "bullet.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define SCORE (100)
#define MINIMUM_LFE (0)
#define MINIMUM_COLOR_CHANGE_TIME (0)
#define COLOR_CHANGE_TIME (10)
#define DEFAULT_COLOR (D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f))
#define HIT_COLOR (D3DXCOLOR(1.0f, 0.0f, 0.0f, 1.0f))

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************

//=============================================================================
// コンストラクタ
//=============================================================================
CEnemy::CEnemy(int nPriority) : CScene2d(nPriority)
{
	m_Move = INITIAL_MOVE;								//移動量
	m_nLife = MINIMUM_LFE;								//体力
	m_nChangeColorTime = MINIMUM_COLOR_CHANGE_TIME;		//色変更時間
	m_bHit = false;										//ヒットしたか
	m_State = STATE_NONE;								//状態
}

//=============================================================================
// デストラクタ
//=============================================================================
CEnemy::~CEnemy()
{
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CEnemy::Init(void)
{
	//2Dシーン管理初期化処理関数呼び出し
	CScene2d::Init();
	//オブジェタイプを敵にする
	SetObjType(CScene::OBJTYPE_ENEMY);
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CEnemy::Uninit(void)
{
	//2Dシーン管理終了処理関数呼び出し
	CScene2d::Uninit();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CEnemy::Update(void)
{
	//位置を取得する
	D3DXVECTOR3 Position = GetPosition();
	//2Dシーン管理更新処理関数呼び出し
	CScene2d::Update();
	//位置更新
	Position += m_Move;
	//位置の設定
	SetPosition(Position);
	//もしヒットしたら
	if (m_bHit == true)
	{
		//色変更時間を進める
		m_nChangeColorTime++;
		//もし色変更時間になったら
		if (m_nChangeColorTime == COLOR_CHANGE_TIME)
		{
			//色を設定する
 			SetColor(DEFAULT_COLOR);
			//ヒット状態を偽にする
			m_bHit = false;
			//色変更時間を初期化する
			m_nChangeColorTime = MINIMUM_COLOR_CHANGE_TIME;
		}
	}
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CEnemy::Draw(void)
{
	//2Dシーン管理描画処理関数呼び出し
	CScene2d::Draw();
}

//=============================================================================
// ヒット処理関数
//=============================================================================
void CEnemy::Hit(void)
{
	//ヒット状態にする
	m_bHit = true;
	//プレイヤーを取得する
	CPlayer * pPlayer = CGameMode::GetPlayer();
	//もしプレイヤーのポインタがNULLじゃなかったら
	if (pPlayer != NULL)
	{
		//プレイヤーのスコアを加算する
		pPlayer->AddScore(SCORE);
	}
	//体力減算関数呼び出し
	SubLife();
	//色を設定する
	SetColor(HIT_COLOR);
}

//=============================================================================
// 体力減算処理関数
//=============================================================================
void CEnemy::SubLife(void)
{
	//プレイヤーの取得
	CPlayer * pPlayer = CGameMode::GetPlayer();
	//体力を減算する
	m_nLife--;
}

//=============================================================================
// 移動量設定関数
//=============================================================================
void CEnemy::SetMove(D3DXVECTOR3 Move)
{
	//移動量を設定する
	m_Move = Move;
}

//=============================================================================
// 体力設定関数
//=============================================================================
void CEnemy::SetLife(int nLife)
{
	//体力を設定する
	m_nLife = nLife;
}

//=============================================================================
// 状態設定関数
//=============================================================================
void CEnemy::SetState(STATE State)
{
	m_State = State;
}
