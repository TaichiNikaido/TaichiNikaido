//=============================================================================
//
// 名前の入力処理[name.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "main.h"
#include "name.h"
#include "renderer.h"
#include "manager.h"
#include "input.h"
#include "keyboard.h"
#include "joystick.h"
#include "player.h"
#include "sound.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// 静的メンバ変数初期化
//*****************************************************************************

//=============================================================================
// コンストラクタ
//=============================================================================
CName::CName()
{
	memset(m_aLetter,NULL, sizeof(m_aLetter));	//文字
}

//=============================================================================
// デストラクタ
//=============================================================================
CName::~CName()
{
}

//=============================================================================
// テクスチャロード関数
//=============================================================================
HRESULT CName::TextureLoad(void)
{
	return S_OK;
}

//=============================================================================
// テクスチャアンロード関数
//=============================================================================
void CName::TextureUnload(void)
{
}

//=============================================================================
// 生成関数
//=============================================================================
CName * CName::Create(void)
{
	CName * pName;
	pName = new CName;
	pName->Init();
	return pName;
}

//=============================================================================
// 初期化関数
//=============================================================================
HRESULT CName::Init(void)
{
	//文字設定処理関数呼び出し
	SetLetter();
	return S_OK;
}

//=============================================================================
// 終了関数
//=============================================================================
void CName::Uninit(void)
{
}

//=============================================================================
// 更新関数
//=============================================================================
void CName::Update(void)
{
	//キーボードの取得
	CKeyboard * pKeyboard = CManager::GetKeyboard();
	//ジョイスティックの取得
	CJoystick * pJoystick = CManager::GetJoystick();
	LPDIRECTINPUTDEVICE8 lpDIDevice = CJoystick::GetDevice();
	DIJOYSTATE js;
	//ジョイスティックの振動取得
	LPDIRECTINPUTEFFECT pDIEffect = CJoystick::GetEffect();
	if (lpDIDevice != NULL)
	{
		lpDIDevice->Poll();
		lpDIDevice->GetDeviceState(sizeof(DIJOYSTATE), &js);
	}
}

//=============================================================================
// 描画関数
//=============================================================================
void CName::Draw(void)
{
}

//=============================================================================
// 入力処理関数
//=============================================================================
void CName::Input(void)
{
}

//=============================================================================
// 文字設定処理関数
//=============================================================================
void CName::SetLetter(void)
{
	//文字の2次元配列に文字を格納
	m_aLetter[0][0] = 'Q';
	m_aLetter[0][1] = 'W';
	m_aLetter[0][2] = 'E';
	m_aLetter[0][3] = 'R';
	m_aLetter[0][4] = 'T';
	m_aLetter[0][5] = 'Y';
	m_aLetter[0][6] = 'U';
	m_aLetter[0][7] = 'I';
	m_aLetter[0][8] = 'O';
	m_aLetter[0][9] = 'P';
	m_aLetter[1][0] = 'A';
	m_aLetter[1][1] = 'S';
	m_aLetter[1][2] = 'D';
	m_aLetter[1][3] = 'F';
	m_aLetter[1][4] = 'G';
	m_aLetter[1][5] = 'H';
	m_aLetter[1][6] = 'J';
	m_aLetter[1][7] = 'K';
	m_aLetter[1][8] = 'L';
	m_aLetter[2][0] = 'Z';
	m_aLetter[2][1] = 'X';
	m_aLetter[2][2] = 'C';
	m_aLetter[2][3] = 'V';
	m_aLetter[2][4] = 'B';
	m_aLetter[2][5] = 'N';
	m_aLetter[2][6] = 'M';
}