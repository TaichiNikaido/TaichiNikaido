//=============================================================================
//
// ドラゴン [enemy_dragon.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include <stdio.h>
#include <stdlib.h>
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "scene2d.h"
#include "enemy_dragon.h"
#include "bullet.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define TEXTURE ("Data/Texture/Enemy/dragon.png")
#define SIZE (D3DXVECTOR3(600.0f,600.0f,0.0f))
#define LIFE (300)

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************
LPDIRECT3DTEXTURE9 CEnemyDragon::m_pTexture = NULL;	//テクスチャへのポインタ

//=============================================================================
// コンストラクタ
//=============================================================================
CEnemyDragon::CEnemyDragon(int nPriority)
{
	m_nPatternAnime = 0;	//パターンアニメ
	m_nCounterAnime = 0;	//カウンターアニメ
}

//=============================================================================
// デストラクタ
//=============================================================================
CEnemyDragon::~CEnemyDragon()
{
}

//=============================================================================
// テクスチャ読み込み関数
//=============================================================================
HRESULT CEnemyDragon::TextureLoad(void)
{
	CRenderer *pRenderer = CManager::GetRenderer();
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();

	// テクスチャの生成
	D3DXCreateTextureFromFile(pDevice,	// デバイスへのポインタ
		TEXTURE,						// ファイルの名前
		&m_pTexture);					// 読み込むメモリー
	return S_OK;
}

//=============================================================================
// テクスチャ破棄関数
//=============================================================================
void CEnemyDragon::TextureUnload(void)
{
	// テクスチャの破棄
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}

//=============================================================================
// 生成処理関数
//=============================================================================
CEnemyDragon * CEnemyDragon::Create(D3DXVECTOR3 Position)
{
	CEnemyDragon * pEnemyDragon;
	pEnemyDragon = new CEnemyDragon;
	pEnemyDragon->Init();
	pEnemyDragon->SetPosition(Position);
	return pEnemyDragon;
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CEnemyDragon::Init(void)
{
	//テクスチャのUV座標の設定
	D3DXVECTOR2 aTexture[NUM_VERTEX];
	aTexture[0] = D3DXVECTOR2(0.1666f * m_nPatternAnime, 0.0f);
	aTexture[1] = D3DXVECTOR2(0.1666f * m_nPatternAnime + 0.1666f, 0.0f);
	aTexture[2] = D3DXVECTOR2(0.1666f * m_nPatternAnime, 1.0f);
	aTexture[3] = D3DXVECTOR2(0.1666f * m_nPatternAnime + 0.1666f, 1.0f);
	//敵の初期化処理関数呼び出し
	CEnemy::Init();
	//サイズの初期設定
	SetSize(SIZE);
	//体力の初期設定
	SetLife(LIFE);
	//テクスチャの設定
	SetTexture(aTexture);
	//テクスチャの割り当て
	BindTexture(m_pTexture);
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CEnemyDragon::Uninit(void)
{
	//敵の終了処理関数呼び出し
	CEnemy::Uninit();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CEnemyDragon::Update(void)
{
	//敵の更新処理関数呼び出し
	CEnemy::Update();
	//もしライフが0になったら
	if (GetLife() <= 0)
	{
		//死亡処理関数呼び出し
		Death();
	}
	//アニメーション処理関数呼び出し
	Animation();
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CEnemyDragon::Draw(void)
{
	//敵の描画処理関数呼び出し
	CEnemy::Draw();
}

//=============================================================================
// 攻撃処理関数
//=============================================================================
void CEnemyDragon::Attack(void)
{
}

//=============================================================================
// 死亡処理関数
//=============================================================================
void CEnemyDragon::Death(void)
{
	//終了処理関数呼び出し
	Uninit();
	return;
}

//=============================================================================
// アニメーション処理関数
//=============================================================================
void CEnemyDragon::Animation(void)
{
	//カウントインクリメント
	m_nCounterAnime++;
	//カウントが4以上になった場合
	if (m_nCounterAnime > 24)
	{
		//カウントを0にする
		m_nCounterAnime = 0;

		//パターンのインクリメント
		m_nPatternAnime++;

		if (m_nPatternAnime > 4)
		{
			m_nPatternAnime = 0;
		}
	}

	//アニメーションのカウントを進める
	m_nCounterAnime++;
	//テクスチャのUV座標の設定
	D3DXVECTOR2 aTexture[NUM_VERTEX];
	aTexture[0] = D3DXVECTOR2(0.1666f * m_nPatternAnime, 0.0f);
	aTexture[1] = D3DXVECTOR2(0.1666f * m_nPatternAnime + 0.1666f, 0.0f);
	aTexture[2] = D3DXVECTOR2(0.1666f * m_nPatternAnime, 1.0f);
	aTexture[3] = D3DXVECTOR2(0.1666f * m_nPatternAnime + 0.1666f, 1.0f);
	//テクスチャの設定
	SetTexture(aTexture);
}
