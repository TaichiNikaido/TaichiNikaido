//=============================================================================
//
// レベルアップアイテム [item_levelup.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include <stdio.h>
#include <stdlib.h>
#include "main.h"
#include "manager.h"
#include "mode_game.h"
#include "renderer.h"
#include "scene2d.h"
#include "item_levelup.h"
#include "player.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define TEXTURE ("Data/Texture/Item/lvup.png")

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************
LPDIRECT3DTEXTURE9 CItemLevelUP::m_pTexture = NULL;	//テクスチャへのポインタ

//=============================================================================
// コンストラクタ
//=============================================================================
CItemLevelUP::CItemLevelUP(int nPriority)
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CItemLevelUP::~CItemLevelUP()
{
}

//=============================================================================
// テクスチャ読み込み関数
//=============================================================================
HRESULT CItemLevelUP::TextureLoad(void)
{
	CRenderer *pRenderer = CManager::GetRenderer();
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();

	// テクスチャの生成
	D3DXCreateTextureFromFile(pDevice,	// デバイスへのポインタ
		TEXTURE,						// ファイルの名前
		&m_pTexture);					// 読み込むメモリー
	return S_OK;
}

//=============================================================================
// テクスチャ破棄関数
//=============================================================================
void CItemLevelUP::TextureUnload(void)
{
	// テクスチャの破棄
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}

//=============================================================================
// 生成処理関数
//=============================================================================
CItemLevelUP * CItemLevelUP::Create(D3DXVECTOR3 Position)
{
	CItemLevelUP * pItemLevelUP;
	pItemLevelUP = new CItemLevelUP;
	pItemLevelUP->Init();
	pItemLevelUP->SetPosition(Position);
	return pItemLevelUP;
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CItemLevelUP::Init(void)
{
	//テクスチャのUV座標の設定
	D3DXVECTOR2 aTexture[NUM_VERTEX];
	aTexture[0] = D3DXVECTOR2(0.0f, 0.0f);
	aTexture[1] = D3DXVECTOR2(1.0f, 0.0f);
	aTexture[2] = D3DXVECTOR2(0.0f, 1.0f);
	aTexture[3] = D3DXVECTOR2(1.0f, 1.0f);
	//サウンドの取得
	CSound * pSound = CManager::GetSound();
	//アイテムの初期化処理関数呼び出し
	CItem::Init();
	//テクスチャの設定
	SetTexture(aTexture);
	//テクスチャの割り当て
	BindTexture(m_pTexture);
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CItemLevelUP::Uninit(void)
{
	//アイテムの終了処理関数呼び出し
	CItem::Uninit();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CItemLevelUP::Update(void)
{
	//アイテムの更新処理関数呼び出し
	CItem::Update();
	//もし衝突判定が真のとき
	if (GetbCollision() == true)
	{
		//効果を与える処理関数呼び出し
		Give();
	}
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CItemLevelUP::Draw(void)
{
	//アイテムの描画処理関数呼び出し
	CItem::Draw();
}

//=============================================================================
// 効果を与える処理関数関数
//=============================================================================
void CItemLevelUP::Give(void)
{
	//プレイヤーの取得
	CPlayer * pPlayer = CGameMode::GetPlayer();
	if (pPlayer != NULL)
	{
		//レベルアップ処理関数の呼び出し
		pPlayer->LevelUp();
	}
	//終了処理関数呼び出し
	Uninit();
	return;
}
