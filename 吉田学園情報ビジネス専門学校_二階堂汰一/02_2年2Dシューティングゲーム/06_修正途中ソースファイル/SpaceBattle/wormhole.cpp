//=============================================================================
//
// ワームホール [wormhole.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "mode_game.h"
#include "wormhole.h"

LPDIRECT3DTEXTURE9 CWormhole::m_pTexture[2] = {};
//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define WORMHOLE ("Data/Texture/Player/wormhole.png")
#define WORMHOLE_EFFECT ("Data/Texture/Player/wormhole_effect.png")

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************

//=============================================================================
// コンストラクタ
//=============================================================================
CWormhole::CWormhole(int nPriority)
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CWormhole::~CWormhole()
{
}

//=============================================================================
// テクスチャ読み込み関数
//=============================================================================
HRESULT CWormhole::TextureLoad(void)
{
	//レンダラーの取得
	CRenderer *pRenderer = CManager::GetRenderer();
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();

	// テクスチャの生成
	D3DXCreateTextureFromFile(pDevice,		// デバイスへのポインタ
		WORMHOLE,							// ファイルの名前
		&m_pTexture[0]);					// 読み込むメモリー

											// テクスチャの生成
	D3DXCreateTextureFromFile(pDevice,		// デバイスへのポインタ
		WORMHOLE_EFFECT,					// ファイルの名前
		&m_pTexture[1]);					// 読み込むメモリー
	return S_OK;
}

//=============================================================================
// テクスチャ破棄関数
//=============================================================================
void CWormhole::TextureUnload(void)
{
	for (int nCount = 0; nCount < 2; nCount++)
	{
		// テクスチャの破棄
		if (m_pTexture[nCount] != NULL)
		{
			m_pTexture[nCount]->Release();
			m_pTexture[nCount] = NULL;
		}
	}
}

//=============================================================================
// 生成処理関数
//=============================================================================
CWormhole * CWormhole::Create(D3DXVECTOR3 Position)
{
	CWormhole * pWormhole;
	pWormhole = new CWormhole;
	pWormhole->Init();
	pWormhole->SetPosition(Position);
	return pWormhole;
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CWormhole::Init(void)
{
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CWormhole::Uninit(void)
{
	//2Dシーンの終了処理関数呼び出し
	CScene2d::Uninit();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CWormhole::Update(void)
{
	//2Dシーンの更新処理関数呼び出し
	CScene2d::Update();
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CWormhole::Draw(void)
{
	//2Dシーンの描画処理関数呼び出し
	CScene2d::Draw();
}

void CWormhole::Spawn(void)
{
}
