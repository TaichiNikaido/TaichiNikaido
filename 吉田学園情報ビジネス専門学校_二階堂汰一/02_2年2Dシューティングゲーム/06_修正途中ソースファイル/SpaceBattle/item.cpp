//=============================================================================
//
// アイテム [item.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include <stdio.h>
#include <stdlib.h>
#include "main.h"
#include "manager.h"
#include "mode_game.h"
#include "renderer.h"
#include "scene2d.h"
#include "item.h"
#include "player.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define SPEED (D3DXVECTOR3(0.0f,4.0f,0.0f))
#define SIZE (D3DXVECTOR3(50.0f,50.0f,0.0f))

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************

//=============================================================================
// コンストラクタ
//=============================================================================
CItem::CItem(int nPriority)
{
	m_Move = D3DXVECTOR3(0.0f, 0.0f, 0.0f);	//移動量
	m_bCollision = false;					//衝突判定
}

//=============================================================================
// デストラクタ
//=============================================================================
CItem::~CItem()
{
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CItem::Init(void)
{
	//2Dシーン管理初期化処理関数呼び出し
	CScene2d::Init();
	//移動量の初期設定
	m_Move = SPEED;
	//サイズの初期設定
	SetSize(SIZE);
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CItem::Uninit(void)
{
	//2Dシーン管理終了処理関数呼び出し
	CScene2d::Uninit();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CItem::Update(void)
{
	//位置を取得する
	D3DXVECTOR3 Position = GetPosition();
	//2Dシーン管理更新処理関数呼び出し
	CScene2d::Update();
	//位置更新
	Position += m_Move;
	//位置の設定
	SetPosition(Position);
	//衝突判定処理関数呼び出し
	Collision();
	//移動可能範囲処理関数呼び出し
	MovableRange();
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CItem::Draw(void)
{
	//2Dシーン管理描画処理関数呼び出し
	CScene2d::Draw();
}

//=============================================================================
// 衝突判定処理関数
//=============================================================================
void CItem::Collision(void)
{
	//プレイヤーの取得
	CPlayer * pPlayer = CGameMode::GetPlayer();

	//プレイヤーとの衝突
	if (GetPosition().x + GetSize().x / 2 > pPlayer->GetPosition().x - (pPlayer->GetSize().x / 2) &&
		GetPosition().x - GetSize().x / 2 < pPlayer->GetPosition().x + (pPlayer->GetSize().x / 2) &&
		GetPosition().y + GetSize().y / 2 > pPlayer->GetPosition().y - (pPlayer->GetSize().y / 2) &&
		GetPosition().y - GetSize().y / 2 < pPlayer->GetPosition().y + (pPlayer->GetSize().y / 2))
	{
		//衝突判定を真にする
		m_bCollision = true;
	}
}

//=============================================================================
// 移動可能範囲処理関数
//=============================================================================
void CItem::MovableRange(void)
{
	//もし画面外に行ったら
	if (GetPosition().y < 0 ||
		GetPosition().y > FIELD_HEIGHT ||
		GetPosition().x < FIELD_WIDTH_MIN ||
		GetPosition().x > FIELD_WIDTH)
	{
		//終了処理関数呼び出し
		Uninit();
		return;
	}
}
