//=============================================================================
//
// 火の粉 [sparks.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "particle_texture_sparks.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define TEXTURE_PASS ("Data/Texture/Particle/Sparks.png")

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************
LPDIRECT3DTEXTURE9 CSparksTexture::m_pTexture = NULL;

//=============================================================================
// コンストラクタ
//=============================================================================
CSparksTexture::CSparksTexture()
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CSparksTexture::~CSparksTexture()
{
}

//=============================================================================
// テクスチャ読み込み関数
//=============================================================================
HRESULT CSparksTexture::TextureLoad(void)
{
	//レンダラーの取得
	CRenderer *pRenderer = CManager::GetRenderer();
	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();
	// テクスチャの生成
	D3DXCreateTextureFromFile(pDevice,	// デバイスへのポインタ
		TEXTURE_PASS,					// ファイルの名前
		&m_pTexture);					// 読み込むメモリー
	return S_OK;
}

//=============================================================================
// テクスチャ破棄関数
//=============================================================================
void CSparksTexture::TextureUnload(void)
{
	// テクスチャの破棄
	if (m_pTexture != NULL)
	{
		//テクスチャの破棄処理関数呼び出し
		m_pTexture->Release();
		//テクスチャをNULLにする
		m_pTexture = NULL;
	}
}

//=============================================================================
// 生成処理関数
//=============================================================================
CSparksTexture * CSparksTexture::Create(D3DXVECTOR3 Position, D3DXVECTOR3 Rotation, D3DXVECTOR3 Size, D3DXVECTOR3 Move,int nLife)
{
	//火の粉のテクスチャのポインタ
	CSparksTexture * pSparksTexture = NULL;
	//もし火の粉のテクスチャのポインタがNULLの場合
	if (pSparksTexture == NULL)
	{
		//火の粉のテクスチャのメモリ確保
		pSparksTexture = new CSparksTexture;
		//もし火の粉のテクスチャのポインタがNULLじゃない場合
		if (pSparksTexture != NULL)
		{
			//火の粉のテクスチャの位置を設定する
			pSparksTexture->SetPosition(Position);
			//火の粉のテクスチャの回転を設定する
			pSparksTexture->SetRotation(Rotation);
			//火の粉のテクスチャのサイズを設定する
			pSparksTexture->SetSize(Size);
			//火の粉のテクスチャの移動量を設定する
			pSparksTexture->SetMove(Move);
			//火の粉のテクスチャの体力を設定する
			pSparksTexture->SetLife(nLife);
			//火の粉のテクスチャの初期化処理関数呼び出し
			pSparksTexture->Init();
		}
	}
	//火の粉のテクスチャのポインタを返す
	return pSparksTexture;
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CSparksTexture::Init(void)
{
	//パーティクルの初期化処理関数呼び出し
	CParticleTexture::Init();
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CSparksTexture::Uninit(void)
{
	//パーティクルの終了処理関数呼び出し
	CParticleTexture::Uninit();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CSparksTexture::Update(void)
{
	//パーティクルの更新処理関数呼び出し
	CParticleTexture::Update();
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CSparksTexture::Draw(void)
{
	//パーティクルの描画処理関数呼び出し
	CParticleTexture::Draw();
}
