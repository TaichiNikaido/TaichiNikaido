//=============================================================================
//
// 武器 [weapon.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include <stdio.h>
#include <stdlib.h>
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "weapon.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************

//=============================================================================
// コンストラクタ
//=============================================================================
CWeapon::CWeapon()
{
	m_Position = INITIAL_D3DXVECTOR3;			//位置
	m_Size = INITIAL_D3DXVECTOR3;				//サイズ
	m_CollisionSize = INITIAL_D3DXVECTOR3;		//衝突判定用サイズ
	m_Rotation = INITIAL_ROTATION;				//回転
	m_pModel = NULL;							//モデルのポインタ
	m_pParentModel = NULL;						//親モデルのポインタ
	m_ModelData = {};							//モデルデータ
}

//=============================================================================
// デストラクタ
//=============================================================================
CWeapon::~CWeapon()
{
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CWeapon::Init(void)
{
	//もしモデルのポインタがNULLの場合
	if (m_pModel == NULL)
	{
		//モデルの生成
		m_pModel = CModel::Create(m_ModelData);
	}
	//もしモデルのポインタがNULLじゃない場合
	if (m_pModel != NULL)
	{
		//モデルの初期化処理関数呼び出し
		m_pModel->Init();
		//モデルに位置を設定する
		m_pModel->SetPosition(m_Position);
		//モデルにサイズを設定する
		m_pModel->SetSize(m_Size);
		//モデルに回転を設定する
		m_pModel->SetRotation(m_Rotation);
		//親モデルを設定する
		m_pModel->SetParentModel(m_pParentModel);
	}
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CWeapon::Uninit(void)
{
	//もしモデルのポインタがNULLじゃない場合
	if (m_pModel != NULL)
	{
		//モデルの終了処理関数呼び出し
		m_pModel->Uninit();
	}
	//破棄処理関数呼び出し
	Release();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CWeapon::Update(void)
{
	//もしモデルのポインタがNULLじゃない場合
	if (m_pModel != NULL)
	{
		//モデルの更新処理関数呼び出し
		m_pModel->Update();
	}
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CWeapon::Draw(void)
{
	//もしモデルのポインタがNULLじゃない場合
	if (m_pModel != NULL)
	{
		//モデルの描画処理関数呼び出し
		m_pModel->Draw();
	}
}

//=============================================================================
// 衝突判定関数
//=============================================================================
void CWeapon::Collision(void)
{
}
