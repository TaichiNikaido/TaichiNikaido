//=============================================================================
//
// タイトルロゴ [title_logo.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "Base/main.h"
#include "Base/manager.h"
#include "Base/renderer.h"
#include "title_logo.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define TEXTURE_PASS ("Data/Texture/Logo/Logo_Title.png")							//テクスチャのパス
#define POSITION (D3DXVECTOR3(SCREEN_WIDTH / 2,SCREEN_HEIGHT / 2 - 100.0f,0.0f))	//位置
#define SIZE (D3DXVECTOR3(1100.0f,500.0f,0.0f))										//サイズ

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************
LPDIRECT3DTEXTURE9 CTitleLogo::m_pTexture = nullptr;	//テクスチャのポインタ

//=============================================================================
// コンストラクタ
//=============================================================================
CTitleLogo::CTitleLogo(int nPriority) : CScene2d(nPriority)
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CTitleLogo::~CTitleLogo()
{
}

//=============================================================================
// テクスチャ読み込み関数
//=============================================================================
HRESULT CTitleLogo::TextureLoad(void)
{
	//レンダラーの取得
	CRenderer *pRenderer = CManager::GetRenderer();
	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();
	//テクスチャの生成
	D3DXCreateTextureFromFile(pDevice,	//デバイスへのポインタ
		TEXTURE_PASS,					//ファイルの名前
		&m_pTexture);					//読み込むメモリー
	return S_OK;
}

//=============================================================================
// テクスチャ破棄関数
//=============================================================================
void CTitleLogo::TextureUnload(void)
{
	//もしテクスチャのポインタがnullptrではない場合
	if (m_pTexture != nullptr)
	{
		//テクスチャの破棄処理関数呼び出し
		m_pTexture->Release();
		//テクスチャのポインタをnullptrにする
		m_pTexture = nullptr;
	}
}

//=============================================================================
// 生成処理関数呼び出し
//=============================================================================
CTitleLogo * CTitleLogo::Create()
{
	//タイトルロゴのポインタ
	CTitleLogo * pTitleLogo = nullptr;
	//タイトルロゴのポインタがnullptrの場合
	if (pTitleLogo == nullptr)
	{
		//タイトルロゴのメモリ確保
		pTitleLogo = new CTitleLogo;
		//タイトルロゴのポインタがnullptrではない場合
		if (pTitleLogo != nullptr)
		{
			//タイトルロゴの位置設定
			pTitleLogo->SetPosition(POSITION);
			//タイトルロゴのサイズ設定
			pTitleLogo->SetSize(SIZE);
			//タイトルロゴの初期化処理関数呼び出し
			pTitleLogo->Init();
		}
	}
	//タイトルロゴのボタンのポインタを返す
	return pTitleLogo;
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CTitleLogo::Init(void)
{
	//テクスチャのUV座標の設定
	D3DXVECTOR2 aTexture[NUM_VERTEX];
	aTexture[0] = D3DXVECTOR2(0.0f, 0.0f);
	aTexture[1] = D3DXVECTOR2(1.0f, 0.0f);
	aTexture[2] = D3DXVECTOR2(0.0f, 1.0f);
	aTexture[3] = D3DXVECTOR2(1.0f, 1.0f);
	//2Dシーンの初期化処理関数呼び出し
	CScene2d::Init();
	//テクスチャの設定
	SetTexture(aTexture);
	//テクスチャの割り当て
	BindTexture(m_pTexture);
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CTitleLogo::Uninit(void)
{
	//2Dシーンの終了処理関数呼び出し
	CScene2d::Uninit();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CTitleLogo::Update(void)
{
	//2Dシーンの更新処理関数呼び出し
	CScene2d::Update();
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CTitleLogo::Draw(void)
{
	//2Dシーンの描画処理関数呼び出し
	CScene2d::Draw();
}