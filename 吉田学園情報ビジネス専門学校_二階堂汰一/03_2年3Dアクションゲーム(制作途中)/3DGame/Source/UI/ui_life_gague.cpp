//=============================================================================
//
// 体力UI [ui_life.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "Base/main.h"
#include "Base/manager.h"
#include "Mode/mode_game.h"
#include "Base/renderer.h"
#include "ui_life_gauge.h"
#include "Polygon2d/gauge.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define MINIMUM_LIFE (0)	//体力の最小値

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************

//=============================================================================
// コンストラクタ
//=============================================================================
CLifeGaugeUI::CLifeGaugeUI(int nPriority) : CScene(nPriority)
{
	m_Position = INITIAL_D3DXVECTOR3;	//位置
	m_Size = INITIAL_D3DXVECTOR3;		//サイズ
	m_Color = INITIAL_D3DXCOLOR;		//色
	m_nMaxLife = MINIMUM_LIFE;			//体力の最大値
	m_nLife = MINIMUM_LIFE;				//体力
	m_pGauge = NULL;					//ゲージのポインタ
}

//=============================================================================
// デストラクタ
//=============================================================================
CLifeGaugeUI::~CLifeGaugeUI()
{
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CLifeGaugeUI::Init(void)
{
	//もしゲージのポインタがnullptrじゃない場合
	if (m_pGauge != nullptr)
	{
		//ゲージに値の最大値を設定
		m_pGauge->SetMaxValue(m_nMaxLife);
		//ゲージに値を設定
		m_pGauge->SetValue(m_nLife);
		//ゲージ初期化処理
		m_pGauge->Init();
	}
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CLifeGaugeUI::Uninit(void)
{
	if (m_pGauge != nullptr)
	{
		//ゲージの破棄処理関数呼び出し
		m_pGauge->Uninit();
	}
	//破棄処理関数呼び出し
	Release();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CLifeGaugeUI::Update(void)
{
	//もしゲージのポインタがnullptrじゃない場合
	if (m_pGauge != nullptr)
	{
		//ゲージに値の最大値を設定
		m_pGauge->SetMaxValue(m_nMaxLife);
		//ゲージに値を設定
		m_pGauge->SetValue(m_nLife);
		//ゲージの更新処理関数呼び出し
		m_pGauge->Update();
	}
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CLifeGaugeUI::Draw(void)
{
	//ゲームモードの取得
	CGameMode * pGameMode = CManager::GetGameMode();
	//もしゲームのポインタがnullptrではない場合
	if (pGameMode != nullptr)
	{
		//もしポーズが生成されてない場合
		if (pGameMode->GetbCreatePause() == false)
		{
			//もしゲージのポインタがnullptrではない場合
			if (m_pGauge != nullptr)
			{
				//ゲージの描画処理関数呼び出し
				m_pGauge->Draw();
			}
		}
	}
}