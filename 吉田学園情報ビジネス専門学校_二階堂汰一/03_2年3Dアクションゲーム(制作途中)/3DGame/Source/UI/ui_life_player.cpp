//=============================================================================
//
// プレイヤーのライフのUI [ui_life_player.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "Base/main.h"
#include "Base/manager.h"
#include "Base/renderer.h"
#include "Mode/mode_game.h"
#include "ui_life_player.h"
#include "Polygon2d/gauge.h"
#include "Character/player.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define POSITION (D3DXVECTOR3(0.0f,0.0f,0.0f))
#define SIZE (D3DXVECTOR3(600.0f,100.0f,0.0f))
#define COLOR (D3DXCOLOR(0.0f,1.0f,0.0f,1.0f))

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************

//=============================================================================
// コンストラクタ
//=============================================================================
CPlayerLifeUI::CPlayerLifeUI()
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CPlayerLifeUI::~CPlayerLifeUI()
{
}

//=============================================================================
// 生成処理関数
//=============================================================================
CPlayerLifeUI * CPlayerLifeUI::Create()
{
	//プレイヤーのライフのUIポインタ
	CPlayerLifeUI * pPlayerLifeUI = nullptr;
	//プレイヤーのライフのUIポインタがnullptrの場合
	if (pPlayerLifeUI == nullptr)
	{
		//プレイヤーのライフのUIのメモリ確保
		pPlayerLifeUI = new CPlayerLifeUI;
		//プレイヤーのライフのUIのポインタがNULLではない場合
		if (pPlayerLifeUI != nullptr)
		{
			//プレイヤーのライフのUIの初期化処理関数呼び出し
			pPlayerLifeUI->Init();
		}
	}
	//プレイヤーのライフのUIのポインタを返す
	return pPlayerLifeUI;
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CPlayerLifeUI::Init(void)
{
	//プレイヤーを取得する
	CPlayer * pPlayer = CManager::GetGameMode()->GetPlayer();
	//もしプレイヤーのポインタがnullptrじゃない場合
	if (pPlayer != nullptr)
	{
		//プレイヤーの体力を取得
		int nLife = pPlayer->GetLife();
		//体力の最大値を設定
		SetMaxLife(nLife);
		//体力を設定
		SetLife(nLife);
	}
	//ゲージの生成処理関数呼び出し
	SetGauge(CGauge::Create(POSITION, SIZE, COLOR));
	//ライフの初期化処理関数呼び出し
	CLifeUI::Init();
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CPlayerLifeUI::Uninit(void)
{
	//ライフのUIの終了処理関数呼び出し
	CLifeUI::Uninit();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CPlayerLifeUI::Update(void)
{
	//ライフのUIの更新処理関数呼び出し
	CLifeUI::Update();
	//プレイヤーを取得する
	CPlayer * pPlayer = CManager::GetGameMode()->GetPlayer();
	//もしプレイヤーのポインタがnullptrじゃない場合
	if (pPlayer != nullptr)
	{
		//プレイヤーの体力を取得
		int nLife = pPlayer->GetLife();
		//体力を設定
		SetLife(nLife);
	}
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CPlayerLifeUI::Draw(void)
{
	//ライフのUIの描画処理関数呼び出し
	CLifeUI::Draw();
}
