//=============================================================================
//
// オブジェクト [object.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "Base/main.h"
#include "Base/manager.h"
#include "Base/renderer.h"
#include "object.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define INITIAL_COLLISION_SIZE (D3DXVECTOR3(0.0f,0.0f,0.0f))		//衝突判定用サイズの初期値

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************

//=============================================================================
// コンストラクタ
//=============================================================================
CObject::CObject()
{
	m_CollisionSize = INITIAL_COLLISION_SIZE;	//衝突判定用サイズ
	m_pModel = NULL;							//モデルのポインタ
	m_ModelData = {};							//モデルデータ
}

//=============================================================================
// デストラクタ
//=============================================================================
CObject::~CObject()
{
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CObject::Init(void)
{
	//位置を取得する
	D3DXVECTOR3 Position = GetPosition();
	//回転を取得する
	D3DXVECTOR3 Rotation = GetRotation();
	//サイズ
	D3DXVECTOR3 Size = GetSize();
	//もしモデルのポインタがNULLの場合
	if (m_pModel == NULL)
	{
		//モデルの生成
		m_pModel = CModel::Create(m_ModelData);
		//もしモデルのポインタがNULLじゃない場合
		if (m_pModel != NULL)
		{
			//モデルに位置を設定する
			m_pModel->SetPosition(Position);
			//モデルに回転を設定する
			m_pModel->SetRotation(Rotation);
			//モデルにサイズを設定する
			m_pModel->SetSize(Size);
			//モデルの初期化処理関数呼び出し
			m_pModel->Init();
		}
	}
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CObject::Uninit(void)
{
	//もしモデルのポインタがNULLじゃない場合
	if (m_pModel != NULL)
	{
		//モデルの終了処理関数呼び出し
		m_pModel->Uninit();
	}
	//破棄処理関数呼び出し
	Release();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CObject::Update(void)
{
	//位置を取得する
	D3DXVECTOR3 Position = GetPosition();
	//回転を取得する
	D3DXVECTOR3 Rotation = GetRotation();
	//サイズ
	D3DXVECTOR3 Size = GetSize();
	//もしモデルのポインタがNULLじゃない場合
	if (m_pModel != NULL)
	{
		//モデルに位置を設定する
		m_pModel->SetPosition(Position);
		//モデルに回転を設定する
		m_pModel->SetRotation(Rotation);
		//モデルにサイズを設定する
		m_pModel->SetSize(Size);
		//モデルの更新処理関数呼び出し
		m_pModel->Update();
	}
	//衝突判定の家
	Collision();
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CObject::Draw(void)
{
	//もしモデルのポインタがNULLじゃない場合
	if (m_pModel != NULL)
	{
		//モデルの描画処理関数呼び出し
		m_pModel->Draw();
	}
}

//=============================================================================
// 衝突処理関数
//=============================================================================
void CObject::Collision(void)
{
}
