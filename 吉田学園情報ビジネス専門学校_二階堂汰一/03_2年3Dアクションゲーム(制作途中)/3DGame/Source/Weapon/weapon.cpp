//=============================================================================
//
// 武器 [weapon.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include <stdio.h>
#include <stdlib.h>
#include "Base/main.h"
#include "Base/manager.h"
#include "Base/renderer.h"
#include "weapon.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************

//=============================================================================
// コンストラクタ
//=============================================================================
CWeapon::CWeapon(int nPriority) : CScene3d(nPriority)
{
	m_CollisionSize = INITIAL_D3DXVECTOR3;		//衝突判定用サイズ
	m_pModel = NULL;							//モデルのポインタ
	m_pParentModel = NULL;						//親モデルのポインタ
	m_aModelData = {};							//モデルデータ
}

//=============================================================================
// デストラクタ
//=============================================================================
CWeapon::~CWeapon()
{
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CWeapon::Init(void)
{
	//位置を取得する
	D3DXVECTOR3 Position = GetPosition();
	//回転を取得する
	D3DXVECTOR3 Rotation = GetRotation();
	//サイズを取得する
	D3DXVECTOR3 Size = GetSize();
	//もしモデルのポインタがnullptrの場合
	if (m_pModel == nullptr)
	{
		//モデルの生成
		m_pModel = CModel::Create(m_aModelData);
		//もしモデルのポインタがNULLじゃない場合
		if (m_pModel != nullptr)
		{
			//位置をモデルに設定する
			m_pModel->SetPosition(Position);
			//回転をモデルに設定する
			m_pModel->SetRotation(Rotation);
			//サイズをモデルに設定する
			m_pModel->SetSize(Size);
			//モデルの初期化処理関数呼び出し
			m_pModel->Init();
			//親モデルを設定する
			m_pModel->SetParentModel(m_pParentModel);
		}
	}
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CWeapon::Uninit(void)
{
	//もしモデルのポインタがnullptrじゃない場合
	if (m_pModel != nullptr)
	{
		//モデルの終了処理関数呼び出し
		m_pModel->Uninit();
	}
	//破棄処理関数呼び出し
	Release();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CWeapon::Update(void)
{
	//もしモデルのポインタがnullptrじゃない場合
	if (m_pModel != nullptr)
	{
		//モデルの更新処理関数呼び出し
		m_pModel->Update();
	}
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CWeapon::Draw(void)
{
	//もしモデルのポインタがnullptrじゃない場合
	if (m_pModel != nullptr)
	{
		//モデルの描画処理関数呼び出し
		m_pModel->Draw();
	}
}

//=============================================================================
// 衝突判定関数
//=============================================================================
void CWeapon::Collision(void)
{
}
