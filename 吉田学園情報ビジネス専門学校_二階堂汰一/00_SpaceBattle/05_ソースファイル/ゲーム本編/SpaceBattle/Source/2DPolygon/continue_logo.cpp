//=============================================================================
//
// コンティニューロゴ [continue_logo.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "Base/main.h"
#include "Base/manager.h"
#include "Base/renderer.h"
#include "Mode/mode_game.h"
#include "continue_logo.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define TEXTURE ("Data/Texture/continue_logo.png")	//テクスチャ
#define SIZE (D3DXVECTOR3(300.0f,70.0f,0.0f))		//サイズ
#define INITIAL_TIME (0)							//時間の初期値	
#define UNINIT_TIME (100)							//終了時間

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************
LPDIRECT3DTEXTURE9 CContinueLogo::m_pTexture = NULL;	//テクスチャへのポインタ

//=============================================================================
// コンストラクタ
//=============================================================================
CContinueLogo::CContinueLogo(int nPriority)
{
	m_nTime = INITIAL_TIME;	//タイム
}

//=============================================================================
// デストラクタ
//=============================================================================
CContinueLogo::~CContinueLogo()
{
}

//=============================================================================
// テクスチャ読み込み関数
//=============================================================================
HRESULT CContinueLogo::TextureLoad(void)
{
	//レンダラーの取得
	CRenderer *pRenderer = CManager::GetRenderer();
	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();
	// テクスチャの生成
	D3DXCreateTextureFromFile(pDevice,				// デバイスへのポインタ
		TEXTURE,									// ファイルの名前
		&m_pTexture);								// 読み込むメモリー
	return S_OK;
}

//=============================================================================
// テクスチャ破棄関数
//=============================================================================
void CContinueLogo::TextureUnload(void)
{
	//もしテクスチャがNULLじゃない場合
	if (m_pTexture != NULL)
	{
		//テクスチャの破棄処理関数呼び出し
		m_pTexture->Release();
		//テクスチャをNULLにする
		m_pTexture = NULL;
	}
}

//=============================================================================
// 生成処理関数
//=============================================================================
CContinueLogo * CContinueLogo::Create(D3DXVECTOR3 Position)
{
	//コンティニューのロゴのポインタ
	CContinueLogo * pContinueLogo = NULL;
	//もしコンティニューのロゴのポインタがNULLの場合
	if (pContinueLogo == NULL)
	{
		//コンティニューのロゴのメモリ確保
		pContinueLogo = new CContinueLogo;
		//もしコンティニューのロゴのポインタがNULLじゃない場合
		if (pContinueLogo != NULL)
		{
			//位置を指定する
			pContinueLogo->SetPosition(Position);
			//初期化処理関数呼び出し
			pContinueLogo->Init();
		}
	}
	//コンティニューのロゴのポインタを返す
	return pContinueLogo;
}

//=============================================================================
// 初期処理関数
//=============================================================================
HRESULT CContinueLogo::Init()
{
	//テクスチャのUV座標の設定
	D3DXVECTOR2 aTexture[NUM_VERTEX];
	aTexture[0] = D3DXVECTOR2(0.0f, 0.0f);
	aTexture[1] = D3DXVECTOR2(1.0f, 0.0f);
	aTexture[2] = D3DXVECTOR2(0.0f, 1.0f);
	aTexture[3] = D3DXVECTOR2(1.0f, 1.0f);
	//2Dシーン初期化処理関数呼び出し
	CScene2d::Init();
	//サイズの初期設定
	SetSize(SIZE);
	//テクスチャの設定
	SetTexture(aTexture);
	//テクスチャの割り当て
	BindTexture(m_pTexture);
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CContinueLogo::Uninit()
{
	//2Dシーン終了処理関数呼び出し
	CScene2d::Uninit();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CContinueLogo::Update()
{
	//2Dシーン更新処理関数呼び出し
	CScene2d::Update();
	//時間を加算する
	m_nTime++;
	//もし時間が終了時間になったら
	if (m_nTime == UNINIT_TIME)
	{
		//終了関数呼び出し
		Uninit();
		return;
	}
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CContinueLogo::Draw()
{
	//2Dシーン描画処理関数呼び出し
	CScene2d::Draw();
}
