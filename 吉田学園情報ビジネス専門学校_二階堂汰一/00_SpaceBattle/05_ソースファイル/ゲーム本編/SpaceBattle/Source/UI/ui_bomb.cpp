//=============================================================================
//
// 爆弾のUI [ui_bomb.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "Base/main.h"
#include "Base/manager.h"
#include "Mode/mode_game.h"
#include "ui_bomb_texture.h"
#include "ui_bomb.h"
#include "Player/player.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define POSITION (D3DXVECTOR3(450.0f,80.0f,0.0f))	//位置
#define SIZE (D3DXVECTOR3(45.0f,45.0f,0.0f))		//サイズ
#define SHOW_ALPHA (255)							//アルファ値最大
#define HIDE_ALPHA (100)							//アルファ値半分
#define MINIMUM_BOMB_TEXTURE (0)					//爆弾テクスチャの最小数

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************

//=============================================================================
// コンストラクタ
//=============================================================================
CBombUI::CBombUI(int nPriority) : CScene(nPriority)
{
	memset(m_apBombTexture, MINIMUM_BOMB_TEXTURE, sizeof(m_apBombTexture));	//テクスチャのポインタ
}

//=============================================================================
//デストラクタ
//=============================================================================
CBombUI::~CBombUI()
{
}

//=============================================================================
// 生成処理関数
//=============================================================================
CBombUI * CBombUI::Create(void)
{
	//爆弾のUIのポインタ
	CBombUI * pBombUI = NULL;
	//爆弾のUIのポインタがNULLの場合
	if (pBombUI == NULL)
	{
		//爆弾のUIのメモリ確保
		pBombUI = new CBombUI;
	}
	//爆弾のUIのポインタがNULLじゃない場合
	if (pBombUI != NULL)
	{
		//爆弾のUIの初期化処理関数呼び出し
		pBombUI->Init();
	}
	//爆弾のUIのポインタを返す
	return pBombUI;
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CBombUI::Init(void)
{
	//プレイヤーの最大所持爆弾数分回す
	for (int nCount = 0; nCount < PLAYER_MAX_BOMB; nCount++)
	{
		//UI用爆弾テクスチャ生成
		m_apBombTexture[nCount] = CUIBombTexture::Create(D3DXVECTOR3(POSITION.x + (SIZE.x * nCount), POSITION.y, 0.0f), SIZE);
	}
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CBombUI::Uninit(void)
{
	//破棄処理関数呼び出し
	Release();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CBombUI::Update(void)
{
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CBombUI::Draw(void)
{
	//プレイヤーの最大所持爆弾数分回す
	for (int nCount = 0; nCount < PLAYER_MAX_BOMB; nCount++)
	{
		//UI用爆弾テクスチャの描画処理関数呼び出し
		m_apBombTexture[nCount]->Draw();
	}
}

//=============================================================================
// 設定処理関数
//=============================================================================
void CBombUI::SetBomb(int nBomb)
{
	//もし爆弾のUIがプレイヤーの最大ボム所持数以下だった時
	if (nBomb <= PLAYER_MAX_BOMB)
	{
		//プレイヤーの最大ボム所持数分回す
		for (int nCount = 0; nCount < PLAYER_MAX_BOMB; nCount++)
		{
			//UI用爆弾テクスチャ設定処理関数呼び出し
			m_apBombTexture[nCount]->SetBombTexture(HIDE_ALPHA);
		}
		//プレイヤーのボム所持数分回す
		for (int nCount = 0; nCount < nBomb; nCount++)
		{
			//UI用爆弾テクスチャ設定処理関数呼び出し
			m_apBombTexture[nCount]->SetBombTexture(SHOW_ALPHA);
		}
	}
}
