//=============================================================================
//
// リプレイボタン [button_replay.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "Base/main.h"
#include "Base/manager.h"
#include "Base/renderer.h"
#include "Base/sound.h"
#include "button_replay.h"
#include "Player/player.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define TEXTURE_PASS ("Data/Texture/Button/button_replay.png")

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************
LPDIRECT3DTEXTURE9 CReplayButton::m_pTexture = {};	//テクスチャのポインタ

//=============================================================================
// コンストラクタ
//=============================================================================
CReplayButton::CReplayButton()
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CReplayButton::~CReplayButton()
{
}

//=============================================================================
// テクスチャ読み込み関数
//=============================================================================
HRESULT CReplayButton::TextureLoad(void)
{
	//レンダラーの取得
	CRenderer *pRenderer = CManager::GetRenderer();
	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();
	//テクスチャの生成
	D3DXCreateTextureFromFile(pDevice,		//デバイスへのポインタ
		TEXTURE_PASS,						//ファイルの名前
		&m_pTexture);						//読み込むメモリー
	return S_OK;
}

//=============================================================================
// テクスチャ破棄関数
//=============================================================================
void CReplayButton::TextureUnload(void)
{
	//もしテクスチャのポインタがnullptrではない場合
	if (m_pTexture != nullptr)
	{
		//テクスチャの破棄処理関数呼び出し
		m_pTexture->Release();
		//テクスチャをnullptrにする
		m_pTexture = nullptr;
	}
}

//=============================================================================
// 生成処理関数呼び出し
//=============================================================================
CReplayButton * CReplayButton::Create(D3DXVECTOR3 Position)
{
	//リプレイボタンのポインタ
	CReplayButton * pReplay = nullptr;
	//リプレイボタンののポインタがnullptrの場合
	if (pReplay == nullptr)
	{
		//リプレイボタンののメモリ確保
		pReplay = new CReplayButton;
		//リプレイボタンののポインタがnullptrではない場合
		if (pReplay != nullptr)
		{
			//リプレイボタンのの位置設定
			pReplay->SetPosition(Position);
			//リプレイボタンのの初期化処理関数呼び出し
			pReplay->Init();
		}
	}
	//リプレイボタンののポインタを返す
	return pReplay;
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CReplayButton::Init(void)
{
	//テクスチャのUV座標の設定
	D3DXVECTOR2 aTexture[NUM_VERTEX];
	aTexture[0] = D3DXVECTOR2(0.0f, 0.0f);
	aTexture[1] = D3DXVECTOR2(1.0f, 0.0f);
	aTexture[2] = D3DXVECTOR2(0.0f, 1.0f);
	aTexture[3] = D3DXVECTOR2(1.0f, 1.0f);
	//ボタンの初期化処理関数呼び出し
	CButton::Init();
	//テクスチャの設定
	SetTexture(aTexture);
	//テクスチャの割り当て
	BindTexture(m_pTexture);
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CReplayButton::Uninit(void)
{
	//ボタンの終了処理関数呼び出し
	CButton::Uninit();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CReplayButton::Update(void)
{
	//ボタンの更新処理関数呼び出し
	CButton::Update();
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CReplayButton::Draw(void)
{
	//ボタンの描画処理関数呼び出し
	CButton::Draw();
}

//=============================================================================
// プレス処理関数
//=============================================================================
void CReplayButton::Press(void)
{
	//プレイヤーにリプレイ信号を送る
	CPlayer::SetbReplay(true);
	//ゲームモードに遷移
	CManager::StartFade(CManager::MODE_GAME);
}
