//=============================================================================
//
// マネージャー [manager.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "main.h"
#include "renderer.h"
#include "manager.h"
#include "scene.h"
#include "Imgui/imgui.h"
#include "Imgui/imgui_impl_dx9.h"
#include "Imgui/imgui_impl_win32.h"
#include <d3d9.h>
#include <dinput.h>
#include <tchar.h>
#include "mode_tool.h"
#include "particle.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************
CRenderer * CManager::m_pRenderer = NULL;		//レンダラーへのポインタ

//=============================================================================
// コンストラクタ
//=============================================================================
CManager::CManager()
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CManager::~CManager()
{
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CManager::Init(HINSTANCE hInsitance, HWND hWnd, bool bWindow)
{
	//もしレンダラーのポインタがNULLの場合
	if (m_pRenderer == NULL)
	{
		//レンダラーのメモリを確保
		m_pRenderer = new  CRenderer;
	}
	//レンダラーの初期化処理関数呼び出し
	m_pRenderer->Init(hWnd, TRUE);
	//ImGuiのバージョンチェック処理関数呼び出し
	IMGUI_CHECKVERSION();
	//ImGuiのコンテキスト処理関数呼び出し
	ImGui::CreateContext();
	ImGuiIO& io = ImGui::GetIO(); (void)io;
	//ImGuiのスタイル処理関数呼び出し
	ImGui::StyleColorsDark();
	//ImGuiの初期化処理関数呼び出し
	ImGui_ImplWin32_Init(hWnd);
	//ImGuiの初期化処理関数呼び出し
	ImGui_ImplDX9_Init(CManager::GetRenderer()->GetDevice());
	//全読み込み関数呼び出し
	LoadAll();
	//ツールモードの生成
	CToolMode::Create();
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CManager::Uninit(void)
{
	//シーンの全破棄処理関数呼び出し
	CScene::ReleaseAll();
	//全破棄関数呼び出し
	DeleteAll();
	//ImGuiのDirectx終了処理関数呼び出し
	ImGui_ImplDX9_Shutdown();
	//ImGuiのWin32終了処理関数呼び出し
	ImGui_ImplWin32_Shutdown();
	//ImGuiのコンテキスト破棄処理関数呼び出し
	ImGui::DestroyContext();
	//全読み込み破棄関数呼び出し
	UnloadAll();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CManager::Update(void)
{
	//もしレンダラーのポインタがNULLじゃない場合
	if (m_pRenderer != NULL)
	{
		//レンダラーの更新処理関数呼び出し
		m_pRenderer->Update();
	}
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CManager::Draw(void)
{
	//もしレンダラーのポインタがNULLじゃない場合
	if (m_pRenderer != NULL)
	{
		//レンダラーの描画処理関数呼び出し
		m_pRenderer->Draw();
	}
	
}

//=============================================================================
// 全読み込み処理関数
//=============================================================================
void CManager::LoadAll(void)
{
	CParticle::TextureLoad();
}

//=============================================================================
// 全読み込み破棄処理関数
//=============================================================================
void CManager::UnloadAll(void)
{
	CParticle::TextureUnload();
}

//=============================================================================
// 全破棄処理関数
//=============================================================================
void CManager::DeleteAll(void)
{
	//もしレンダラーのポインタがNULLじゃない場合
	if (m_pRenderer != NULL)
	{
		//レンダラーの終了処理関数呼び出し
		m_pRenderer->Uninit();
		//レンダラーのメモリ破棄
		delete m_pRenderer;
		//レンダラーのポインタをNULLにする
		m_pRenderer = NULL;
	}
}
